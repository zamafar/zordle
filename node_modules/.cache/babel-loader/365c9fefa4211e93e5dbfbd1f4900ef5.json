{"ast":null,"code":"var _jsxFileName = \"/Users/fz/Development/calculator/src/component/App.js\";\nimport React from \"react\";\nimport DisplayRow from \"./DisplayRow\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport { getActiveRow, getActiveCol, decrementActiveCol, displayChars, displayCols, initialiseState, nextCol, nextRow, checkWord, wordBtns, clearWordBtns, WORDLEN, NUMTRIES } from \"./AppVars\";\nimport \"./App.css\"; //import { check } from \"prettier\";\n\nfunction createResultGrid() {\n  var amberSq = String.fromCodePoint(0x1F7E8);\n  var greenSq = String.fromCodePoint(0x1F7E9);\n  var blackSq = String.fromCodePoint(0x2B1B);\n  var resGrid = \"\";\n  var maxSq = getActiveRow() * WORDLEN + getActiveCol();\n\n  for (var i = 0; i < maxSq; i++) {\n    if (displayCols[i] === \"green\") {\n      resGrid = resGrid + greenSq;\n    } else if (displayCols[i] === \"orange\") {\n      resGrid = resGrid + amberSq;\n    } else if (displayCols[i] === \"white\") {\n      resGrid = resGrid + blackSq;\n    }\n\n    if ((i + 1) % WORDLEN === 0) {\n      resGrid = resGrid + \"\\n\";\n    }\n  }\n\n  return resGrid;\n}\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      numTries: 0\n    };\n\n    this.setButtonBGCGrey = btn => {\n      btn.setState({\n        bgColor: \"#DEB887\"\n      });\n    };\n\n    this.handleClick = btn => {\n      var index = getActiveRow() * WORDLEN + getActiveCol();\n      var buttonName = btn.props.name;\n\n      if (buttonName === \"<=\") {\n        if (getActiveCol() > 0) {\n          displayChars[index - 1] = \"!\";\n          displayCols[index - 1] = \"black\";\n          wordBtns.pop();\n          decrementActiveCol();\n          this.setState({\n            numTries: this.numTries + 1\n          });\n        }\n\n        return;\n      }\n\n      if (buttonName === \"Enter\") {\n        if (getActiveCol() === WORDLEN) {\n          var res = checkWord();\n\n          if (res === 0) {\n            alert(\"Invalid word\");\n            return;\n          } else if (res === 1) {\n            nextRow();\n\n            if (getActiveRow() === NUMTRIES) {\n              alert(\"End Game!\");\n            }\n          } else if (res === 2) {\n            var resGrid = createResultGrid();\n\n            if (window.confirm(\"You Got It! Do you want to share the result?\")) {\n              navigator.clipboard.writeText(resGrid);\n              alert(resGrid);\n            }\n          }\n\n          this.setState({\n            numTries: this.numTries + 1\n          });\n          wordBtns.forEach(this.setButtonBGCGrey);\n          clearWordBtns();\n        }\n\n        return;\n      }\n\n      if (getActiveCol() >= WORDLEN) {\n        return;\n      }\n\n      displayChars[index] = buttonName;\n      displayCols[index] = \"#FFE4C4\"; // Colour = Bisque\n\n      wordBtns.push(btn);\n      nextCol();\n      this.setState({\n        numTries: this.numTries + 1\n      });\n    };\n\n    this.numTries = 0;\n    initialiseState();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"component-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(DisplayRow, {\n      numTries: this.numTries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(ButtonPanel, {\n      clickHandler: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/fz/Development/calculator/src/component/App.js"],"names":["React","DisplayRow","ButtonPanel","getActiveRow","getActiveCol","decrementActiveCol","displayChars","displayCols","initialiseState","nextCol","nextRow","checkWord","wordBtns","clearWordBtns","WORDLEN","NUMTRIES","createResultGrid","amberSq","String","fromCodePoint","greenSq","blackSq","resGrid","maxSq","i","App","Component","constructor","state","numTries","setButtonBGCGrey","btn","setState","bgColor","handleClick","index","buttonName","props","name","pop","res","alert","window","confirm","navigator","clipboard","writeText","forEach","push","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,YAAT,EAAuBC,YAAvB,EAAqCC,kBAArC,EAAyDC,YAAzD,EAAuEC,WAAvE,EAAoFC,eAApF,EAAqGC,OAArG,EAA8GC,OAA9G,EAAuHC,SAAvH,EAAkIC,QAAlI,EAA4IC,aAA5I,EAA2JC,OAA3J,EAAoKC,QAApK,QAAoL,WAApL;AACA,OAAO,WAAP,C,CACA;;AAEA,SAASC,gBAAT,GAA4B;AAC1B,MAAIC,OAAO,GAAGC,MAAM,CAACC,aAAP,CAAqB,OAArB,CAAd;AACA,MAAIC,OAAO,GAAGF,MAAM,CAACC,aAAP,CAAqB,OAArB,CAAd;AACA,MAAIE,OAAO,GAAGH,MAAM,CAACC,aAAP,CAAqB,MAArB,CAAd;AACA,MAAIG,OAAO,GAAG,EAAd;AAEA,MAAIC,KAAK,GAAGpB,YAAY,KAAKW,OAAjB,GAA2BV,YAAY,EAAnD;;AACA,OAAK,IAAIoB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACD,KAAhB,EAAuBC,CAAC,EAAxB,EAA4B;AAC1B,QAAIjB,WAAW,CAACiB,CAAD,CAAX,KAAmB,OAAvB,EAAgC;AAC9BF,MAAAA,OAAO,GAAGA,OAAO,GAAGF,OAApB;AACD,KAFD,MAEO,IAAIb,WAAW,CAACiB,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AACtCF,MAAAA,OAAO,GAAGA,OAAO,GAAGL,OAApB;AACD,KAFM,MAEA,IAAIV,WAAW,CAACiB,CAAD,CAAX,KAAmB,OAAvB,EAAgC;AACrCF,MAAAA,OAAO,GAAGA,OAAO,GAAGD,OAApB;AACD;;AACD,QAAK,CAACG,CAAC,GAAC,CAAH,IAAQV,OAAT,KAAsB,CAA1B,EAA6B;AAC3BQ,MAAAA,OAAO,GAAGA,OAAO,GAAG,IAApB;AACD;AACF;;AACD,SAAOA,OAAP;AACD;;AAED,eAAe,MAAMG,GAAN,SAAkBzB,KAAK,CAAC0B,SAAxB,CAAkC;AAK/CC,EAAAA,WAAW,GAAG;AACZ;AADY,SAJdC,KAIc,GAJN;AACNC,MAAAA,QAAQ,EAAE;AADJ,KAIM;;AAAA,SAMdC,gBANc,GAMKC,GAAG,IAAI;AACxBA,MAAAA,GAAG,CAACC,QAAJ,CAAa;AACXC,QAAAA,OAAO,EAAE;AADE,OAAb;AAGD,KAVa;;AAAA,SAcdC,WAdc,GAcAH,GAAG,IAAI;AACnB,UAAII,KAAK,GAAGhC,YAAY,KAAGW,OAAf,GAAyBV,YAAY,EAAjD;AACA,UAAIgC,UAAU,GAAGL,GAAG,CAACM,KAAJ,CAAUC,IAA3B;;AACA,UAAIF,UAAU,KAAK,IAAnB,EAAyB;AACvB,YAAIhC,YAAY,KAAK,CAArB,EAAwB;AACtBE,UAAAA,YAAY,CAAC6B,KAAK,GAAC,CAAP,CAAZ,GAAwB,GAAxB;AACA5B,UAAAA,WAAW,CAAC4B,KAAK,GAAC,CAAP,CAAX,GAAuB,OAAvB;AACAvB,UAAAA,QAAQ,CAAC2B,GAAT;AACAlC,UAAAA,kBAAkB;AAClB,eAAK2B,QAAL,CAAc;AACZH,YAAAA,QAAQ,EAAE,KAAKA,QAAL,GAAgB;AADd,WAAd;AAGD;;AACD;AACD;;AACD,UAAIO,UAAU,KAAK,OAAnB,EAA4B;AAC1B,YAAIhC,YAAY,OAAOU,OAAvB,EAAgC;AAC9B,cAAI0B,GAAG,GAAG7B,SAAS,EAAnB;;AACA,cAAI6B,GAAG,KAAK,CAAZ,EAAe;AACbC,YAAAA,KAAK,CAAC,cAAD,CAAL;AACA;AACD,WAHD,MAIK,IAAID,GAAG,KAAK,CAAZ,EAAe;AAClB9B,YAAAA,OAAO;;AAEP,gBAAIP,YAAY,OAAOY,QAAvB,EAAiC;AAC/B0B,cAAAA,KAAK,CAAC,WAAD,CAAL;AACD;AACF,WANI,MAOA,IAAID,GAAG,KAAK,CAAZ,EAAe;AAClB,gBAAIlB,OAAO,GAAGN,gBAAgB,EAA9B;;AACA,gBAAI0B,MAAM,CAACC,OAAP,CAAe,8CAAf,CAAJ,EAAoE;AAClEC,cAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BxB,OAA9B;AACAmB,cAAAA,KAAK,CAACnB,OAAD,CAAL;AACD;AACF;;AACD,eAAKU,QAAL,CAAc;AACZH,YAAAA,QAAQ,EAAE,KAAKA,QAAL,GAAgB;AADd,WAAd;AAGAjB,UAAAA,QAAQ,CAACmC,OAAT,CAAiB,KAAKjB,gBAAtB;AACAjB,UAAAA,aAAa;AACd;;AACD;AACD;;AACD,UAAIT,YAAY,MAAMU,OAAtB,EAA+B;AAC7B;AACD;;AACDR,MAAAA,YAAY,CAAC6B,KAAD,CAAZ,GAAsBC,UAAtB;AACA7B,MAAAA,WAAW,CAAC4B,KAAD,CAAX,GAAqB,SAArB,CAhDmB,CAgDa;;AAChCvB,MAAAA,QAAQ,CAACoC,IAAT,CAAcjB,GAAd;AACAtB,MAAAA,OAAO;AAEP,WAAKuB,QAAL,CAAc;AACZH,QAAAA,QAAQ,EAAE,KAAKA,QAAL,GAAgB;AADd,OAAd;AAGD,KArEa;;AAEZ,SAAKA,QAAL,GAAgB,CAAhB;AACArB,IAAAA,eAAe;AAChB;;AAmEDyC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAI,KAAKpB,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,WAAD;AAAa,MAAA,YAAY,EAAE,KAAKK,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;;AAnF8C","sourcesContent":["import React from \"react\";\nimport DisplayRow from \"./DisplayRow\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport { getActiveRow, getActiveCol, decrementActiveCol, displayChars, displayCols, initialiseState, nextCol, nextRow, checkWord, wordBtns, clearWordBtns, WORDLEN, NUMTRIES } from \"./AppVars\";\nimport \"./App.css\";\n//import { check } from \"prettier\";\n\nfunction createResultGrid() {\n  var amberSq = String.fromCodePoint(0x1F7E8);\n  var greenSq = String.fromCodePoint(0x1F7E9);\n  var blackSq = String.fromCodePoint(0x2B1B);\n  var resGrid = \"\";\n\n  var maxSq = getActiveRow() * WORDLEN + getActiveCol();\n  for (var i=0; i<maxSq; i++) {\n    if (displayCols[i] === \"green\") {\n      resGrid = resGrid + greenSq;\n    } else if (displayCols[i] === \"orange\") {\n      resGrid = resGrid + amberSq;\n    } else if (displayCols[i] === \"white\") {\n      resGrid = resGrid + blackSq;\n    }\n    if (((i+1) % WORDLEN) === 0) {\n      resGrid = resGrid + \"\\n\";\n    }\n  }\n  return resGrid;\n}\n\nexport default class App extends React.Component {\n  state = {\n    numTries: 0,\n  };\n\n  constructor() {\n    super();\n    this.numTries = 0;\n    initialiseState();\n  };\n\n  setButtonBGCGrey = btn => {\n    btn.setState({\n      bgColor: \"#DEB887\",\n    });\n  };\n\n  \n\n  handleClick = btn => {\n    var index = getActiveRow()*WORDLEN + getActiveCol();\n    var buttonName = btn.props.name;\n    if (buttonName === \"<=\") {\n      if (getActiveCol() > 0) {\n        displayChars[index-1] = \"!\";\n        displayCols[index-1] = \"black\"\n        wordBtns.pop();\n        decrementActiveCol();\n        this.setState({\n          numTries: this.numTries + 1,\n        }); \n      }\n      return;\n    }\n    if (buttonName === \"Enter\") {\n      if (getActiveCol() === WORDLEN) {\n        var res = checkWord();\n        if (res === 0) {\n          alert(\"Invalid word\")\n          return;\n        }\n        else if (res === 1) {\n          nextRow();\n          \n          if (getActiveRow() === NUMTRIES) {\n            alert(\"End Game!\");\n          }\n        }\n        else if (res === 2) {\n          var resGrid = createResultGrid();\n          if (window.confirm(\"You Got It! Do you want to share the result?\")) {\n            navigator.clipboard.writeText(resGrid);\n            alert(resGrid);\n          }\n        }\n        this.setState({\n          numTries: this.numTries + 1,\n        }) \n        wordBtns.forEach(this.setButtonBGCGrey);\n        clearWordBtns();\n      }\n      return;\n    }\n    if (getActiveCol() >= WORDLEN) {\n      return;\n    }\n    displayChars[index] = buttonName;\n    displayCols[index] = \"#FFE4C4\"; // Colour = Bisque\n    wordBtns.push(btn);\n    nextCol();\n\n    this.setState({\n      numTries: this.numTries + 1,\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"component-app\">\n        <DisplayRow numTries = {this.numTries} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}