{"ast":null,"code":"export const WORDLEN = 5;\nexport const NUMTRIES = 6;\nexport var wotd = \"\";\nexport var displayChars = [];\nexport var displayCols = [];\nexport var activeRow = 0;\nexport var activeCol = 0;\nexport const buttonCols = new Map();\nexport function initialiseState() {\n  wotd = \"PRESS\";\n\n  for (var row = 0; row < NUMTRIES; row++) {\n    for (var col = 0; col < WORDLEN; col++) {\n      var i = row * WORDLEN + col;\n      displayChars[i] = \"!\";\n      displayCols[i] = \"black\";\n    }\n  }\n\n  const keys = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  for (var c of keys) {\n    buttonCols.set(c, \"white\");\n  }\n\n  buttonCols.set(\"Enter\", \"white\");\n  buttonCols.set(\"<=\", \"white\");\n}\n;\nexport function getKeyBGC(c) {\n  return buttonCols.get(c);\n}\nexport function nextCol() {\n  activeCol = activeCol + 1;\n}\nexport function nextRow() {\n  activeRow = activeRow + 1;\n  activeCol = 0;\n}\nexport function getActiveCol() {\n  return activeCol;\n}\nexport function decrementActiveCol() {\n  activeCol = activeCol - 1;\n}\nexport function getActiveRow() {\n  return activeRow;\n}\nexport function checkWord() {\n  var sow = activeRow * WORDLEN + activeCol - WORDLEN;\n  var numGreens = 0;\n  var wotd2 = \"\"; // TODO: check validity of word first and return 1 if not valid\n\n  for (var i = 0; i < WORDLEN; i++) {\n    buttonCols.set(displayChars[sow + i], \"grey\");\n\n    if (wotd[i] === displayChars[sow + i]) {\n      displayCols[sow + i] = \"green\";\n      numGreens = numGreens + 1;\n    } else {\n      wotd2 = wotd2 + wotd[i];\n    }\n  }\n\n  for (i = 0; i < WORDLEN; i++) {\n    if (displayCols[sow + i] !== \"green\") {\n      if (wotd2.indexOf(displayChars[sow + i]) !== -1) {\n        displayCols[sow + i] = \"orange\";\n      } else {\n        displayCols[sow + i] = \"white\";\n      }\n    }\n  } // TODO: grey out used letters in keyboard\n\n\n  if (numGreens === WORDLEN) {\n    return 2;\n  } else {\n    return 1;\n  }\n}","map":{"version":3,"sources":["/Users/fz/Development/calculator/src/component/AppVars.js"],"names":["WORDLEN","NUMTRIES","wotd","displayChars","displayCols","activeRow","activeCol","buttonCols","Map","initialiseState","row","col","i","keys","c","set","getKeyBGC","get","nextCol","nextRow","getActiveCol","decrementActiveCol","getActiveRow","checkWord","sow","numGreens","wotd2","indexOf"],"mappings":"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","sourcesContent":["\nexport const WORDLEN = 5;\nexport const NUMTRIES = 6;\n\nexport var wotd = \"\";\n\nexport var displayChars = [];\nexport var displayCols = [];\n\nexport var activeRow = 0;\nexport var activeCol = 0;\n\nexport const buttonCols = new Map();\n\n\nexport function initialiseState() {\n  wotd = \"PRESS\";\n  for (var row=0; row<NUMTRIES; row++) {\n    for (var col=0; col<WORDLEN; col++) {\n      var i = row*WORDLEN + col;\n      displayChars[i] = \"!\";\n      displayCols[i] = \"black\";\n    }\n  }\n  const keys = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  for (var c of keys) {\n    buttonCols.set(c, \"white\");\n  }\n  buttonCols.set(\"Enter\", \"white\");\n  buttonCols.set(\"<=\", \"white\");\n};\n\nexport function getKeyBGC(c) {\n\n  return buttonCols.get(c);\n}\n\nexport function nextCol() {\n  activeCol = activeCol + 1;\n}\n\nexport function nextRow() {\n  activeRow = activeRow + 1;\n  activeCol = 0;\n}\n\nexport function getActiveCol() {\n  return activeCol;\n}\n\nexport function decrementActiveCol() {\n  activeCol = activeCol - 1;\n}\n\nexport function getActiveRow() {\n  return activeRow;\n}\n\nexport function checkWord() {\n  var sow = activeRow*WORDLEN + activeCol - WORDLEN;\n  var numGreens = 0;\n  var wotd2 = \"\"\n\n  // TODO: check validity of word first and return 1 if not valid\n\n  for (var i=0; i<WORDLEN; i++) {\n    buttonCols.set(displayChars[sow+i], \"grey\");\n    if (wotd[i] === displayChars[sow+i]){\n      displayCols[sow+i] = \"green\";\n      numGreens = numGreens + 1;\n    }\n    else {\n      wotd2 = wotd2 + wotd[i];\n    }\n  }\n  for (i=0; i<WORDLEN; i++) {\n    if (displayCols[sow+i] !== \"green\") {\n      if (wotd2.indexOf(displayChars[sow+i]) !== -1) {\n        displayCols[sow+i] = \"orange\";\n      }\n      else {\n        displayCols[sow+i] = \"white\";\n      }\n    }\n  }\n  // TODO: grey out used letters in keyboard\n\n  if (numGreens === WORDLEN) {\n    return 2;\n  }\n  else {\n    return 1;\n  }\n}"]},"metadata":{},"sourceType":"module"}