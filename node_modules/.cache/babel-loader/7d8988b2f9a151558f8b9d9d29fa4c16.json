{"ast":null,"code":"var _jsxFileName = \"/Users/fz/Development/calculator/src/component/App.js\";\nimport React from \"react\";\nimport DisplayRow from \"./DisplayRow\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport { getActiveRow, getActiveCol, decrementActiveCol, displayChars, displayCols, initialiseState, nextCol, nextRow, checkWord, dotd, wordBtns, clearWordBtns, WORDLEN, NUMTRIES } from \"./AppVars\";\nimport \"./App.css\"; //import { check } from \"prettier\";\n\nfunction createResultGrid() {\n  var amberSq = String.fromCodePoint(0x1F7E8);\n  var greenSq = String.fromCodePoint(0x1F7E9);\n  var blackSq = String.fromCodePoint(0x2B1B);\n  var resGrid = \"\";\n  var maxSq = getActiveRow() * WORDLEN + getActiveCol();\n\n  for (var i = 0; i < maxSq; i++) {\n    if (displayCols[i] === \"green\") {\n      resGrid = resGrid + greenSq;\n    } else if (displayCols[i] === \"orange\") {\n      resGrid = resGrid + amberSq;\n    } else if (displayCols[i] === \"white\") {\n      resGrid = resGrid + blackSq;\n    }\n\n    if ((i + 1) % WORDLEN === 0) {\n      resGrid = resGrid + \"\\n\";\n    }\n  }\n\n  return resGrid;\n}\n\nconst copyToClipboard = (content, doc) => {\n  doc = typeof doc !== 'undefined' ? doc : document;\n  const el = doc.createElement('textarea');\n  el.value = content;\n  doc.body.appendChild(el);\n  el.select();\n  doc.execCommand('copy');\n  doc.body.removeChild(el);\n};\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      numTries: 0\n    };\n\n    this.setButtonBGCGrey = btn => {\n      btn.setState({\n        bgColor: \"#DEB887\"\n      });\n    };\n\n    this.handleClick = btn => {\n      var index = getActiveRow() * WORDLEN + getActiveCol();\n      var buttonName = btn.props.name;\n\n      if (buttonName === \"<=\") {\n        if (getActiveCol() > 0) {\n          displayChars[index - 1] = \"!\";\n          displayCols[index - 1] = \"black\";\n          wordBtns.pop();\n          decrementActiveCol();\n          this.setState({\n            numTries: this.numTries + 1\n          });\n        }\n\n        return;\n      }\n\n      if (buttonName === \"Enter\") {\n        if (getActiveCol() === WORDLEN) {\n          var res = checkWord();\n\n          if (res === 0) {\n            alert(\"Invalid word\");\n            return;\n          } else if (res === 1) {\n            nextRow();\n\n            if (getActiveRow() === NUMTRIES) {\n              alert(\"End Game!\");\n            }\n          } else if (res === 2) {\n            var resGrid = createResultGrid();\n            var copyTxt = \"Puzzle for \" + dotd.toLocaleDateString() + \"\\n\";\n            copyTxt = copyTxt + (getActiveRow() + 1) + \"/\" + NUMTRIES + \"\\n\\n\";\n            copyTxt = copyTxt + resGrid + \"\\n\";\n            doc = document;\n\n            if (window.confirm(\"You Got It!\\n\\n\" + copyTxt + \"\\n\" + \"Copy the result?\")) {\n              copyToClipboard(copyTxt, doc);\n            }\n          }\n\n          this.setState({\n            numTries: this.numTries + 1\n          });\n          wordBtns.forEach(this.setButtonBGCGrey);\n          clearWordBtns();\n        }\n\n        return;\n      }\n\n      if (getActiveCol() >= WORDLEN) {\n        return;\n      }\n\n      displayChars[index] = buttonName;\n      displayCols[index] = \"#FFE4C4\"; // Colour = Bisque\n\n      wordBtns.push(btn);\n      nextCol();\n      this.setState({\n        numTries: this.numTries + 1\n      });\n    };\n\n    this.numTries = 0;\n    initialiseState();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"component-app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(DisplayRow, {\n      numTries: this.numTries,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(ButtonPanel, {\n      clickHandler: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/fz/Development/calculator/src/component/App.js"],"names":["React","DisplayRow","ButtonPanel","getActiveRow","getActiveCol","decrementActiveCol","displayChars","displayCols","initialiseState","nextCol","nextRow","checkWord","dotd","wordBtns","clearWordBtns","WORDLEN","NUMTRIES","createResultGrid","amberSq","String","fromCodePoint","greenSq","blackSq","resGrid","maxSq","i","copyToClipboard","content","doc","document","el","createElement","value","body","appendChild","select","execCommand","removeChild","App","Component","constructor","state","numTries","setButtonBGCGrey","btn","setState","bgColor","handleClick","index","buttonName","props","name","pop","res","alert","copyTxt","toLocaleDateString","window","confirm","forEach","push","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DisplayRow from \"./DisplayRow\";\nimport ButtonPanel from \"./ButtonPanel\";\nimport {  getActiveRow, getActiveCol, decrementActiveCol, displayChars, \n          displayCols, initialiseState, nextCol, nextRow, checkWord, dotd,\n          wordBtns, clearWordBtns, WORDLEN, NUMTRIES } from \"./AppVars\";\nimport \"./App.css\";\n//import { check } from \"prettier\";\n\nfunction createResultGrid() {\n  var amberSq = String.fromCodePoint(0x1F7E8);\n  var greenSq = String.fromCodePoint(0x1F7E9);\n  var blackSq = String.fromCodePoint(0x2B1B);\n  var resGrid = \"\";\n\n  var maxSq = getActiveRow() * WORDLEN + getActiveCol();\n  for (var i=0; i<maxSq; i++) {\n    if (displayCols[i] === \"green\") {\n      resGrid = resGrid + greenSq;\n    } else if (displayCols[i] === \"orange\") {\n      resGrid = resGrid + amberSq;\n    } else if (displayCols[i] === \"white\") {\n      resGrid = resGrid + blackSq;\n    }\n    if (((i+1) % WORDLEN) === 0) {\n      resGrid = resGrid + \"\\n\";\n    }\n  }\n  return resGrid;\n}\n\nconst copyToClipboard = (content, doc) => {\n  doc = (typeof doc !== 'undefined') ?  doc : document;\n  const el = doc.createElement('textarea');\n  el.value = content;\n  doc.body.appendChild(el);\n  el.select();\n  doc.execCommand('copy');\n  doc.body.removeChild(el);\n};\n\nexport default class App extends React.Component {\n  state = {\n    numTries: 0,\n  };\n\n  constructor() {\n    super();\n    this.numTries = 0;\n    initialiseState();\n  };\n\n  setButtonBGCGrey = btn => {\n    btn.setState({\n      bgColor: \"#DEB887\",\n    });\n  };\n\n  \n\n  handleClick = btn => {\n    var index = getActiveRow()*WORDLEN + getActiveCol();\n    var buttonName = btn.props.name;\n    if (buttonName === \"<=\") {\n      if (getActiveCol() > 0) {\n        displayChars[index-1] = \"!\";\n        displayCols[index-1] = \"black\"\n        wordBtns.pop();\n        decrementActiveCol();\n        this.setState({\n          numTries: this.numTries + 1,\n        }); \n      }\n      return;\n    }\n    if (buttonName === \"Enter\") {\n      if (getActiveCol() === WORDLEN) {\n        var res = checkWord();\n        if (res === 0) {\n          alert(\"Invalid word\")\n          return;\n        }\n        else if (res === 1) {\n          nextRow();\n          \n          if (getActiveRow() === NUMTRIES) {\n            alert(\"End Game!\");\n          }\n        }\n        else if (res === 2) {\n          var resGrid = createResultGrid();\n          var copyTxt = \"Puzzle for \" + dotd.toLocaleDateString() + \"\\n\";\n          copyTxt = copyTxt + (getActiveRow()+1) + \"/\" + NUMTRIES + \"\\n\\n\";\n          copyTxt = copyTxt + resGrid + \"\\n\";\n          doc = document;\n          if (window.confirm(\"You Got It!\\n\\n\" + copyTxt + \"\\n\" + \"Copy the result?\")) {\n            copyToClipboard(copyTxt, doc);\n          }\n        }\n        this.setState({\n          numTries: this.numTries + 1,\n        }) \n        wordBtns.forEach(this.setButtonBGCGrey);\n        clearWordBtns();\n      }\n      return;\n    }\n    if (getActiveCol() >= WORDLEN) {\n      return;\n    }\n    displayChars[index] = buttonName;\n    displayCols[index] = \"#FFE4C4\"; // Colour = Bisque\n    wordBtns.push(btn);\n    nextCol();\n\n    this.setState({\n      numTries: this.numTries + 1,\n    })\n  };\n\n  render() {\n    return (\n      <div className=\"component-app\">\n        <DisplayRow numTries = {this.numTries} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}