{"ast":null,"code":"var _jsxFileName = \"/Users/fz/Development/calculator/src/component/Button.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport { getKeyBGC } from \"./AppVars\";\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      this.props.clickHandler(this);\n      alert(\"Button js: name is \" + this.props.name + \", stateBGC is \" + this.state.bgColor + \", keybgc is \" + getKeyBGC(this.props.name));\n\n      if (this.state.bgColor !== getKeyBGC(this.props.name)) {\n        alert(\"Button js: I am going to change color of button \" + this.props.name + \" now because state is \" + this.state.bgColor + \" and array is \" + getKeyBGC(this.props.name) + \".\");\n        this.setState({\n          bgColor: getKeyBGC(this.props.name),\n          grey: getKeyBGC(this.props.name) === \"grey\",\n          white: getKeyBGC(this.props.name) === \"white\"\n        });\n      }\n    };\n\n    this.state = {\n      bgColor: \"white\",\n      grey: false,\n      white: true\n    };\n  }\n\n  render() {\n    const className = [\"component-button\", this.props.grey ? \"grey\" : \"\", this.props.wide ? \"wide\" : \"\"];\n    return React.createElement(\"div\", {\n      className: className.join(\" \").trim(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: {\n        backgroundColor: this.state.bgColor\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, this.props.name));\n  }\n\n}\nButton.propTypes = {\n  name: PropTypes.string,\n  grey: PropTypes.bool,\n  wide: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  bgc: PropTypes.string\n};","map":{"version":3,"sources":["/Users/fz/Development/calculator/src/component/Button.js"],"names":["React","PropTypes","getKeyBGC","Button","Component","constructor","props","handleClick","clickHandler","alert","name","state","bgColor","setState","grey","white","render","className","wide","join","trim","backgroundColor","propTypes","string","bool","func","bgc"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAQlDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,WATmB,GASL,MAAM;AAClB,WAAKD,KAAL,CAAWE,YAAX,CAAwB,IAAxB;AACAC,MAAAA,KAAK,CAAC,wBAAwB,KAAKH,KAAL,CAAWI,IAAnC,GAA0C,gBAA1C,GAA6D,KAAKC,KAAL,CAAWC,OAAxE,GAAkF,cAAlF,GAAmGV,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CAA7G,CAAL;;AACA,UAAI,KAAKC,KAAL,CAAWC,OAAX,KAAuBV,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CAApC,EAAuD;AACrDD,QAAAA,KAAK,CAAC,qDAAqD,KAAKH,KAAL,CAAWI,IAAhE,GAAuE,wBAAvE,GAAkG,KAAKC,KAAL,CAAWC,OAA7G,GAAuH,gBAAvH,GAA0IV,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CAAnJ,GAAuK,GAAxK,CAAL;AACA,aAAKG,QAAL,CAAc;AACZD,UAAAA,OAAO,EAAEV,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CADN;AAEZI,UAAAA,IAAI,EAAEZ,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CAAT,KAA+B,MAFzB;AAGZK,UAAAA,KAAK,EAAEb,SAAS,CAAC,KAAKI,KAAL,CAAWI,IAAZ,CAAT,KAA+B;AAH1B,SAAd;AAKD;AACF,KApBkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,OADE;AAEXE,MAAAA,IAAI,EAAE,KAFK;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAeDC,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,GAAG,CAChB,kBADgB,EAEhB,KAAKX,KAAL,CAAWQ,IAAX,GAAkB,MAAlB,GAA2B,EAFX,EAGhB,KAAKR,KAAL,CAAWY,IAAX,GAAkB,MAAlB,GAA2B,EAHX,CAAlB;AAMA,WACE;AAAK,MAAA,SAAS,EAAED,SAAS,CAACE,IAAV,CAAe,GAAf,EAAoBC,IAApB,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AACG,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE,KAAKV,KAAL,CAAWC;AAA7B,OADV;AAEG,MAAA,OAAO,EAAE,KAAKL,WAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAE+B,KAAKD,KAAL,CAAWI,IAF1C,CADD,CADF;AAQD;;AA7CiD;AAA/BP,M,CACZmB,S,GAAY;AACjBZ,EAAAA,IAAI,EAAET,SAAS,CAACsB,MADC;AAEjBT,EAAAA,IAAI,EAAEb,SAAS,CAACuB,IAFC;AAGjBN,EAAAA,IAAI,EAAEjB,SAAS,CAACuB,IAHC;AAIjBhB,EAAAA,YAAY,EAAEP,SAAS,CAACwB,IAJP;AAKjBC,EAAAA,GAAG,EAAEzB,SAAS,CAACsB;AALE,C","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport { getKeyBGC } from \"./AppVars\";\n\nexport default class Button extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n    grey: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n    bgc: PropTypes.string,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: \"white\",\n      grey: false,\n      white: true,\n    }\n  }\n\n  handleClick = () => {\n    this.props.clickHandler(this);\n    alert(\"Button js: name is \" + this.props.name + \", stateBGC is \" + this.state.bgColor + \", keybgc is \" + getKeyBGC(this.props.name));\n    if (this.state.bgColor !== getKeyBGC(this.props.name)) {\n      alert(\"Button js: I am going to change color of button \" + this.props.name + \" now because state is \" + this.state.bgColor + \" and array is \" + getKeyBGC(this.props.name) + \".\")\n      this.setState({\n        bgColor: getKeyBGC(this.props.name),\n        grey: getKeyBGC(this.props.name) === \"grey\",\n        white: getKeyBGC(this.props.name) === \"white\",\n      }); \n    }\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.grey ? \"grey\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n    ];\n\n    return (\n      <div className={className.join(\" \").trim()}>\n       <button \n          style={{backgroundColor: this.state.bgColor}}\n          onClick={this.handleClick}>{this.props.name}\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}