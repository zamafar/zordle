{"ast":null,"code":"var _jsxFileName = \"/Users/fz/Development/calculator/src/component/Button.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport { getKeyBGC } from \"./AppVars\";\nexport default class Button extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setBGC = bgc => {\n      this.setState({\n        bgColor: bgc\n      });\n    };\n\n    this.handleClick = () => {\n      this.props.clickHandler(this);\n\n      if (this.state.bgColor !== getKeyBGC(this.props.name)) {\n        alert(\"Button js: I am going to change color of button \" + this.props.name + \" now because state is \" + this.state.bgColor + \" and array is \" + getKeyBGC(this.props.name) + \".\");\n        this.setState({\n          bgColor: getKeyBGC(this.props.name),\n          grey: getKeyBGC(this.props.name) === \"grey\",\n          white: getKeyBGC(this.props.name) === \"white\"\n        });\n      }\n    };\n\n    this.state = {\n      bgColor: \"white\",\n      grey: false,\n      white: true\n    };\n  }\n\n  render() {\n    const className = [\"component-button\", this.props.grey ? \"grey\" : \"\", this.props.wide ? \"wide\" : \"\"];\n    return React.createElement(\"div\", {\n      className: className.join(\" \").trim(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      style: {\n        backgroundColor: this.state.bgColor\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.props.name));\n  }\n\n}\nButton.propTypes = {\n  name: PropTypes.string,\n  grey: PropTypes.bool,\n  wide: PropTypes.bool,\n  clickHandler: PropTypes.func,\n  bgc: PropTypes.string\n};","map":{"version":3,"sources":["/Users/fz/Development/calculator/src/component/Button.js"],"names":["React","PropTypes","getKeyBGC","Button","Component","constructor","props","setBGC","bgc","setState","bgColor","handleClick","clickHandler","state","name","alert","grey","white","render","className","wide","join","trim","backgroundColor","propTypes","string","bool","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,cAAP;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,eAAe,MAAMC,MAAN,SAAqBH,KAAK,CAACI,SAA3B,CAAqC;AAQlDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,MATmB,GASVC,GAAG,IAAI;AACd,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAEF;AADG,OAAd;AAGD,KAbkB;;AAAA,SAenBG,WAfmB,GAeL,MAAM;AAClB,WAAKL,KAAL,CAAWM,YAAX,CAAwB,IAAxB;;AACA,UAAI,KAAKC,KAAL,CAAWH,OAAX,KAAuBR,SAAS,CAAC,KAAKI,KAAL,CAAWQ,IAAZ,CAApC,EAAuD;AACrDC,QAAAA,KAAK,CAAC,qDAAqD,KAAKT,KAAL,CAAWQ,IAAhE,GAAuE,wBAAvE,GAAkG,KAAKD,KAAL,CAAWH,OAA7G,GAAuH,gBAAvH,GAA0IR,SAAS,CAAC,KAAKI,KAAL,CAAWQ,IAAZ,CAAnJ,GAAuK,GAAxK,CAAL;AACA,aAAKL,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAER,SAAS,CAAC,KAAKI,KAAL,CAAWQ,IAAZ,CADN;AAEZE,UAAAA,IAAI,EAAEd,SAAS,CAAC,KAAKI,KAAL,CAAWQ,IAAZ,CAAT,KAA+B,MAFzB;AAGZG,UAAAA,KAAK,EAAEf,SAAS,CAAC,KAAKI,KAAL,CAAWQ,IAAZ,CAAT,KAA+B;AAH1B,SAAd;AAKD;AACF,KAzBkB;;AAEjB,SAAKD,KAAL,GAAa;AACXH,MAAAA,OAAO,EAAE,OADE;AAEXM,MAAAA,IAAI,EAAE,KAFK;AAGXC,MAAAA,KAAK,EAAE;AAHI,KAAb;AAKD;;AAoBDC,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,GAAG,CAChB,kBADgB,EAEhB,KAAKb,KAAL,CAAWU,IAAX,GAAkB,MAAlB,GAA2B,EAFX,EAGhB,KAAKV,KAAL,CAAWc,IAAX,GAAkB,MAAlB,GAA2B,EAHX,CAAlB;AAMA,WACE;AAAK,MAAA,SAAS,EAAED,SAAS,CAACE,IAAV,CAAe,GAAf,EAAoBC,IAApB,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AACG,MAAA,KAAK,EAAE;AAACC,QAAAA,eAAe,EAAE,KAAKV,KAAL,CAAWH;AAA7B,OADV;AAEG,MAAA,OAAO,EAAE,KAAKC,WAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAE+B,KAAKL,KAAL,CAAWQ,IAF1C,CADD,CADF;AAQD;;AAlDiD;AAA/BX,M,CACZqB,S,GAAY;AACjBV,EAAAA,IAAI,EAAEb,SAAS,CAACwB,MADC;AAEjBT,EAAAA,IAAI,EAAEf,SAAS,CAACyB,IAFC;AAGjBN,EAAAA,IAAI,EAAEnB,SAAS,CAACyB,IAHC;AAIjBd,EAAAA,YAAY,EAAEX,SAAS,CAAC0B,IAJP;AAKjBnB,EAAAA,GAAG,EAAEP,SAAS,CAACwB;AALE,C","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\nimport { getKeyBGC } from \"./AppVars\";\n\nexport default class Button extends React.Component {\n  static propTypes = {\n    name: PropTypes.string,\n    grey: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n    bgc: PropTypes.string,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      bgColor: \"white\",\n      grey: false,\n      white: true,\n    }\n  }\n\n  setBGC = bgc => {\n    this.setState({\n      bgColor: bgc,\n    })\n  }\n\n  handleClick = () => {\n    this.props.clickHandler(this);\n    if (this.state.bgColor !== getKeyBGC(this.props.name)) {\n      alert(\"Button js: I am going to change color of button \" + this.props.name + \" now because state is \" + this.state.bgColor + \" and array is \" + getKeyBGC(this.props.name) + \".\")\n      this.setState({\n        bgColor: getKeyBGC(this.props.name),\n        grey: getKeyBGC(this.props.name) === \"grey\",\n        white: getKeyBGC(this.props.name) === \"white\",\n      }); \n    }\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.grey ? \"grey\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n    ];\n\n    return (\n      <div className={className.join(\" \").trim()}>\n       <button \n          style={{backgroundColor: this.state.bgColor}}\n          onClick={this.handleClick}>{this.props.name}\n        </button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}